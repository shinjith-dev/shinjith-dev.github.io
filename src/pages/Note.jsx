/* eslint-disable react/jsx-props-no-spreading */
/* eslint-disable react/no-unstable-nested-components */
import React from "react";
import Gist from "react-gist";
import { Link } from "react-router-dom";
import { AnimatePresence, motion } from "framer-motion";
import Markdown from "react-markdown";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import remarkGfm from "remark-gfm";
import { coldarkDark } from "react-syntax-highlighter/dist/esm/styles/prism";
import Footer from "../components/common/Footer";

const markdown =
  'Setting up authentication on a react project with typescript is a difficult task. With the new [Nextjs app router](https://nextjs.org/docs#app-router-vs-pages-router) version, it is much more difficult to manage storage and cookies because it has gotten more complex and server-centric.\n\nI\'m here to share some code snippets for basic **authentication and user management in Nextjs (>13) + typescript.**\n\n## Prerequisite\n- Basic understanding of javascript and typescript\n- Basic knowledge of Nextjs/React\n\n## Steps involved\n1. Setting up a nextjs project\n2. Adding basic login page\n3. Access and modify cookie using custom hook\n4. Creating `AuthContext.tsx` to persist user\n5. Including custom hooks for managing and modifying user\n6. Implementation inside components\n\n\n# Setting up a nextjs project\nWe will be using the app router version of nextjs, which was recently released. Have a look on [this page](https://nextjs.org/docs/app). It includes neccessary details and some FAQs.\n\n- Enter this command and answer the promt question to setup next project:\n\n``` sh\nnpx create-next-app@latest\n```\n\n> Note: While answering, try to use recommended/default options.\n\nCheck [this page](https://nextjs.org/docs/getting-started/installation#manual-installation) for customized manual installations.\n\n- Install required packages\n\n``` sh\ncd next13-auth  # Use your project-name instead\nrm package-lock.json\nyarn\nyarn add axios formik next-client-cookies\n```\n\n> I prefer using [yarn](https://yarnpkg.com/getting-started/install) over [npm cli](https://docs.npmjs.com/cli/v10/configuring-npm/install). However, you don\'t have to remove `package.json` if you are using npm commands.\n\n- Start server by running\n\n``` sh\nyarn dev\n```\n\n- Clean up the code that was generated by nextjs\n<br />\n- Our final project structure looks like this:\n\n![project structure](https://res.cloudinary.com/dqts6qgre/image/upload/v1695853216/sdev/psf3xqe5neive7ajz1df.png)\n\n> Note: Refer docs for better undertanding of recommended nextjs [project structure](https://nextjs.org/docs/getting-started/project-structure).\n> \n\n# Adding basic login page\n\n- Add required type declaration for authentication\n\n``` typescript\n// /utils/types/auth.d.ts\n\nexport type TUser = {\n  email: string;\n  firstName: string;\n  lastName: string;\n};\n\nexport type AuthUser = {\n  token: string;\n  user: TUser;\n};\n\nexport type TLogin = {\n  email: string;\n  password: string;\n};\n\nexport type AuthResponse = {\n  message: string;\n  data?: AuthUser;\n  success?: boolean;\n};\n```\n\n> Note: You might have to **add/remove and structure** types according to your needs and **response format** from backend!\n\n- Add login page to your app directory.\n\n``` tsx\n// /app/login/page.tsx\n\n"use client";\nimport { TLogin } from "@/utils/types/auth";\nimport { Field, Form, Formik, FormikHelpers } from "formik";\nimport React from "react";\n\nconst Login = () => {\n  const handleSubmit = (values: TLogin) => {\n    console.log(values);\n  };\n\n  return (\n    <div className="max-w-[100vw] p-5">\n      <h3 className="mb-5 text-4xl font-medium">Login</h3>\n\n      <Formik\n        initialValues={{\n          email: "",\n          password: "",\n        }}\n        onSubmit={(\n          values: TLogin,\n          { setSubmitting }: FormikHelpers<TLogin>\n        ) => {\n          setTimeout(() => {\n            handleSubmit(values);\n            setSubmitting(false);\n          }, 500);\n        }}\n      >\n        <Form className="grid w-96 grid-cols-2 gap-3">\n          <label htmlFor="email">Email</label>\n          <Field\n            id="email"\n            name="email"\n            placeholder="Enter email"\n            type="email"\n          />\n\n          <label htmlFor="password">Password</label>\n          <Field\n            id="password"\n            name="password"\n            type="password"\n            placeholder="Enter password"\n          />\n\n          <button\n            type="submit"\n            className="w-fit border border-black/75 px-4 py-1"\n          >\n            Submit\n          </button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default Login;\n```\n\n> Note: I will only walk you through creating a login page; you should create/use a backend that can handle basic authentication requests. Also, populate your database with a user to test login action.\n\n\n# Access and modify cookie using custom hook\n\n- Create a custom hook `useCookie.ts` to modify cookie values\n\n``` typescript\n// /hooks/useCookie.ts\n\nimport { useCookies } from "next-client-cookies";\n\nconst useCookie = () => {\n  const cookies = useCookies();\n\n  const getCookie = (key: string) => cookies.get(key);\n\n  const setCookie = (key: string, value: string) =>\n    cookies.set(key, value, {\n      expires: 2,\n      sameSite: "None",\n      secure: true,\n    });\n\n  const removeCookie = (key: string) => cookies.remove(key);\n\n  return { setCookie, getCookie, removeCookie };\n};\n\nexport default useCookie;\n```\n\n- Create `cookies.tsx` and `providers.tsx` inside `app` directory\n\n``` tsx\n// /app/cookies.tsx\n\n"use client";\n\nimport { CookiesProvider } from "next-client-cookies";\n\nexport const ClientCookiesProvider: typeof CookiesProvider = (props) => (\n  <CookiesProvider {...props} />\n);\n```\n\n``` tsx\n// /app/providers.tsx\n\nimport { ClientCookiesProvider } from "./cookies";\nimport { cookies } from "next/headers";\n\nexport function Providers({ children }: React.PropsWithChildren) {\n  return (\n    <ClientCookiesProvider value={cookies().getAll()}>\n      {children}\n    </ClientCookiesProvider>\n  );\n}\n```\n\n- Add `provider.tsx` as a wrapper inside layout\n\n``` tsx\n// /app/layout.tsx\n\n<body className={`${outfit.className} relative min-h-screen w-screen`}>\n  <Providers>\n    <main className="w-screen">{children}</main>\n  </Providers>\n</body>\n```\n\nRefer [this readme](https://github.com/moshest/next-client-cookies) for detailed explaination.\n\n\n# Creating `AuthContext.tsx` to persist user\n\n- Create `AuthContext.tsx`\n\n``` tsx\n// /contexts/AuthContext.tsx\n\n"use client";\nimport { ReactNode, createContext, useEffect, useState } from "react";\nimport { AuthUser } from "@/utils/types/auth";\nimport useCookie from "@/hooks/useCookie";\n\ninterface TAuthContext {\n  user: AuthUser | null;\n  setUser: (user: AuthUser | null) => void;\n}\n\nexport const AuthContext = createContext<TAuthContext>({\n  user: null,\n  setUser: () => {},\n});\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport const AuthProvider = ({ children }: Props) => {\n  const [user, setUser] = useState<AuthUser | null>(null);\n  const { getCookie } = useCookie();\n\n  useEffect(() => {\n    if (!user) {\n      let existingUser = null;\n      const getFromCookie = async () => (existingUser = getCookie("user"));\n      getFromCookie();\n\n      if (existingUser) {\n        try {\n          setUser(JSON.parse(existingUser));\n        } catch (e) {\n          console.log(e);\n        }\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, setUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n```\n\n- Add `AuthProvider` in `providers.tsx`\n\n``` tsx\n// /app/provider.tsx\n\n<ClientCookiesProvider value={cookies().getAll()}>\n  <AuthProvider>{children}</AuthProvider>\n</ClientCookiesProvider>\n```\n\n\n# Including custom hooks for managing and modifying user\n\nThis custom hooks are basically an extension that makes accessing and modifying user in authentication and other components easier without using cookies methods directly.\n\n- Add `useAuth.ts` to manage auth API requests and their response\n\n``` typescript\n// /hooks/useAuth.ts\n\nimport { useUser } from "./useUser";\nimport config from "@/utils/config";\nimport axios from "axios";\nimport { AuthResponse, TLogin, TRegister } from "@/utils/types/auth";\nimport useCookie from "./useCookie";\n\nconst API_URL = config.BACKEND_URL;\n\nexport const useAuth = () => {\n  const { user, addUser, removeUser } = useUser();\n\n  const { getCookie } = useCookie();\n\n  const refresh = () => {\n    let existingUser = null;\n    const getFromCookie = async () => (existingUser = getCookie("user"));\n    getFromCookie();\n\n    if (existingUser) {\n      try {\n        addUser(JSON.parse(existingUser));\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  };\n\n  const register = async (creds: TRegister) => {\n    return await axios\n      .post(`${API_URL}auth/register`, creds)\n      .then((res) => {\n        if (res.data?.data && res.data.data?.token) addUser(res.data.data);\n        return res.data as AuthResponse;\n      })\n      .catch((err) => {\n        if (err && err?.response && err.response?.data)\n          return { ...err.response.data, success: false } as AuthResponse;\n        else return err as AuthResponse;\n      });\n  };\n\n  const login = async (creds: TLogin) => {\n    return await axios\n      .post(`${API_URL}auth/login`, creds)\n      .then((res) => {\n        if (res.data?.data && res.data.data?.token) addUser(res.data.data);\n        return res.data as AuthResponse;\n      })\n      .catch((err) => {\n        if (err && err?.response && err.response?.data)\n          return { ...err.response.data, success: false } as AuthResponse;\n        else return err as AuthResponse;\n      });\n  };\n\n  const logout = () => {\n    removeUser();\n  };\n\n  return { user, login, register, logout, refresh };\n};\n```\n\n> Update authentication requests and response handling according to you backend.\n\n- Add `useUser.ts` to export functions to **add/remove** user\n\n``` typescript\n// /hooks/useUser.ts\n\nimport { useContext } from "react";\nimport { AuthContext } from "../contexts/AuthContext";\nimport { AuthUser } from "@/utils/types/auth";\nimport useCookie from "./useCookie";\n\nexport const useUser = () => {\n  const { user, setUser } = useContext(AuthContext);\n  const { setCookie, removeCookie } = useCookie();\n\n  const addUser = (user: AuthUser) => {    \n    setUser(user);\n    setCookie("user", JSON.stringify(user));\n  };\n\n  const removeUser = () => {\n    setUser(null);\n    removeCookie("user");\n  };\n\n  return { user, addUser, removeUser };\n};\n```\n\n\n# Implementation inside components\n\n- Update your login submit handler function with login auth function\n\n``` tsx\n// /app/login/page.tsx\n\nconst handleSubmit = (values: TLogin) => {\n  console.log(values);\n\n  login(values)\n    .then((data) => {\n      if (data?.success) {\n        // add your code for post successful login here\n        setTimeout(() => {\n          router.push("/");\n        }, 1000);\n      } else console.log(data.message);\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n};\n```\n\n- Finally, use this value across your components\n\nexample:\n\n``` tsx\n// /app/page.tsx\n\n"use client";\nimport { useUser } from "@/hooks/useUser";\nimport Link from "next/link";\n\nexport default function Home() {\n  const { user } = useUser();\n\n  return (\n    <div className="p-5">\n      <h2 className="text-3xl font-medium">Hello Nextjs</h2>\n\n      <p className="my-5 text-sm font-mono">\n        Cookie-user: <pre>{JSON.stringify(user, undefined, 4)}</pre>\n      </p>\n\n      <Link\n        href={"/login"}\n        className="py-1 px-4 border border-black/75"\n      >\n        Login\n      </Link>\n    </div>\n  );\n}\n```\n\n![Implementation example](https://res.cloudinary.com/dqts6qgre/image/upload/v1695852467/sdev/ppseac5scqnwj8g3x6vb.png)\n\n\n## Conclusion\nI tried to make it as broad as possible. Changes and upgrades should be made based on your use cases.\nI couldn\'t find any helpful blogs on this topic, so I\'m hoping this can help someone who is looking for something similar. Please feel free to make any recommendations. Thank you for your time!';

function Note() {
  return (
    <div className="w-screen min-h-screen h-full overflow-x-hidden bg-[#fff] dark:bg-dark-950 transition-all duration-500">
      <div className="container max-w-[1200px] relative mx-auto px-4 sm:px-10 md:px-16 h-full min-h-screen flex flex-col items-center justify-center z-10">
        <motion.div
          initial={{ opacity: 0, x: -50 }}
          whileInView={{ opacity: 1, x: 0 }}
          transition={{ delay: 0.1, type: "tween" }}
          viewport={{ once: true }}
          className="w-full pt-20"
        >
          <Link
            to="/"
            className="text-sm sm:text-base md:text-xl font-semibold text-brand hover:text-brand-dark dark:text-brand-light dark:hover:text-brand flex items-baseline font-mono transition-all leading-none"
          >
            /shinjith-dev<span className="blink">_</span>
          </Link>
        </motion.div>

        <div className="flex-grow w-full py-1">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.3, type: "tween" }}
            viewport={{ once: true }}
            className="text-3xl font-semibold text-gradient-light dark:text-gradient-dark"
          >
            Projects Archive
          </motion.div>

          <div className="mb-16 text-dark-400 leading-loose">
            <Markdown
              className="no-tailwindcss"
              remarkPlugins={[remarkGfm]}
              components={{
                code(props) {
                  const { children, className, node, ...rest } = props;
                  const match = /language-(\w+)/.exec(className || "");
                  return match ? (
                    <SyntaxHighlighter
                      {...rest}
                      language={match[1]}
                      PreTag="div"
                      style={coldarkDark}
                    >
                      {String(children).replace(/\n$/, "")}
                    </SyntaxHighlighter>
                  ) : (
                    <code {...rest} className={className}>
                      {children}
                    </code>
                  );
                },
              }}
            >
              {markdown}
            </Markdown>
          </div>
        </div>
        <Footer />
      </div>
    </div>
  );
}

export default Note;
